// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using EVServiceCenter.Repositories.ThanNTH.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace EVServiceCenter.Repositories.ThanNTH.DBContext;

public partial class FA25_PRN232_SE1717_G3_EVServiceCenterContext : DbContext
{
    public FA25_PRN232_SE1717_G3_EVServiceCenterContext()
    {
    }

    public FA25_PRN232_SE1717_G3_EVServiceCenterContext(DbContextOptions<FA25_PRN232_SE1717_G3_EVServiceCenterContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CarThuannt> CarThuannts { get; set; }

    public virtual DbSet<CarTypeThuannt> CarTypeThuannts { get; set; }

    public virtual DbSet<CenterPartThanNth> CenterPartThanNths { get; set; }

    public virtual DbSet<CenterRevenueHieuPt> CenterRevenueHieuPts { get; set; }

    public virtual DbSet<Certificate> Certificates { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<MaintainingDuynt> MaintainingDuynts { get; set; }

    public virtual DbSet<MaintaningTypeDuynt> MaintaningTypeDuynts { get; set; }

    public virtual DbSet<OrderLamtv> OrderLamtvs { get; set; }

    public virtual DbSet<OrderTypeLamtv> OrderTypeLamtvs { get; set; }

    public virtual DbSet<PartThanNth> PartThanNths { get; set; }

    public virtual DbSet<ServiceCenterHieupt> ServiceCenterHieupts { get; set; }

    public virtual DbSet<ServiceFeedback> ServiceFeedbacks { get; set; }

    public virtual DbSet<ServiceThongnm> ServiceThongnms { get; set; }

    public virtual DbSet<ServiceTypeThongnm> ServiceTypeThongnms { get; set; }

    public virtual DbSet<ShiftsNamPk> ShiftsNamPks { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }

    public virtual DbSet<UsePart> UseParts { get; set; }

    public virtual DbSet<UserShiftsNamPk> UserShiftsNamPks { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=FA25_PRN232_SE1717_G3_EVServiceCenter;User ID=sa;Password=12345;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CarThuannt>(entity =>
        {
            entity.HasKey(e => e.CarThuanntId).HasName("PK__CarThuan__57AF1CEC586C47A2");

            entity.ToTable("CarThuannt");

            entity.HasIndex(e => e.LicensePlate, "UQ__CarThuan__026BC15CBD43B483").IsUnique();

            entity.Property(e => e.CarName).HasMaxLength(255);
            entity.Property(e => e.Color).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LicensePlate).HasMaxLength(50);
            entity.Property(e => e.MaintenanceDate).HasColumnType("datetime");
            entity.Property(e => e.Manufacture).HasMaxLength(100);
            entity.Property(e => e.NextMaintenanceDate).HasColumnType("datetime");

            entity.HasOne(d => d.CarType).WithMany(p => p.CarThuannts)
                .HasForeignKey(d => d.CarTypeId)
                .HasConstraintName("FK__CarThuann__IsDel__4E88ABD4");
        });

        modelBuilder.Entity<CarTypeThuannt>(entity =>
        {
            entity.HasKey(e => e.CarTypeThuanntId).HasName("PK__CarTypeT__C0401B73F617B4F7");

            entity.ToTable("CarTypeThuannt");

            entity.Property(e => e.Category).HasMaxLength(100);
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Manufacture).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<CenterPartThanNth>(entity =>
        {
            entity.HasKey(e => e.CenterPartThanNthid).HasName("PK__CenterPa__DF400BE63462666D");

            entity.ToTable("CenterPartThanNTH");

            entity.Property(e => e.CenterPartThanNthid).HasColumnName("CenterPartThanNTHId");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PartStatus).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Center).WithMany(p => p.CenterPartThanNths)
                .HasForeignKey(d => d.CenterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CenterPar__Cente__60A75C0F");

            entity.HasOne(d => d.Part).WithMany(p => p.CenterPartThanNths)
                .HasForeignKey(d => d.PartId)
                .HasConstraintName("FK__CenterPar__PartI__5FB337D6");
        });

        modelBuilder.Entity<CenterRevenueHieuPt>(entity =>
        {
            entity.HasKey(e => e.CenterRevenueHieuPtid).HasName("PK__CenterRe__E19F399E2B480FE7");

            entity.ToTable("CenterRevenueHieuPT");

            entity.Property(e => e.CenterRevenueHieuPtid).HasColumnName("CenterRevenueHieuPTId");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.ReportPeriod).HasMaxLength(50);
            entity.Property(e => e.RevenueTitle).HasMaxLength(255);

            entity.HasOne(d => d.ReportByNavigation).WithMany(p => p.CenterRevenueHieuPts)
                .HasForeignKey(d => d.ReportBy)
                .HasConstraintName("FK__CenterRev__Repor__05D8E0BE");

            entity.HasOne(d => d.ServiceCenter).WithMany(p => p.CenterRevenueHieuPts)
                .HasForeignKey(d => d.ServiceCenterId)
                .HasConstraintName("FK__CenterRev__Servi__04E4BC85");
        });

        modelBuilder.Entity<Certificate>(entity =>
        {
            entity.HasKey(e => e.CertificateId).HasName("PK__Certific__BBF8A7C1084BAAAF");

            entity.ToTable("Certificate");

            entity.Property(e => e.Achievement).HasMaxLength(255);
            entity.Property(e => e.SchoolName).HasMaxLength(255);
            entity.Property(e => e.Specialized).HasMaxLength(255);

            entity.HasOne(d => d.User).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Certifica__UserI__3A81B327");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.FeedbackId).HasName("PK__Feedback__6A4BEDD6B493C5B8");

            entity.ToTable("Feedback");

            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.ServiceCenter).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.ServiceCenterId)
                .HasConstraintName("FK__Feedback__Servic__0F624AF8");

            entity.HasOne(d => d.User).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Feedback__UserId__0E6E26BF");
        });

        modelBuilder.Entity<MaintainingDuynt>(entity =>
        {
            entity.HasKey(e => e.MaintainingDuyntId).HasName("PK__Maintain__841512959CB84D95");

            entity.ToTable("MaintainingDuynt");

            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Car).WithMany(p => p.MaintainingDuynts)
                .HasForeignKey(d => d.CarId)
                .HasConstraintName("FK__Maintaini__CarId__73BA3083");

            entity.HasOne(d => d.MaintainingType).WithMany(p => p.MaintainingDuynts)
                .HasForeignKey(d => d.MaintainingTypeId)
                .HasConstraintName("FK__Maintaini__Maint__75A278F5");

            entity.HasOne(d => d.Order).WithMany(p => p.MaintainingDuynts)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__Maintaini__Order__74AE54BC");

            entity.HasOne(d => d.Service).WithMany(p => p.MaintainingDuynts)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK__Maintaini__Servi__72C60C4A");

            entity.HasOne(d => d.Technician).WithMany(p => p.MaintainingDuynts)
                .HasForeignKey(d => d.TechnicianId)
                .HasConstraintName("FK__Maintaini__Techn__71D1E811");
        });

        modelBuilder.Entity<MaintaningTypeDuynt>(entity =>
        {
            entity.HasKey(e => e.MaintainingTypeDuyntId).HasName("PK__Maintani__6385E2F7E653A195");

            entity.ToTable("MaintaningTypeDuynt");

            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MaintaningTypeName).HasMaxLength(255);
        });

        modelBuilder.Entity<OrderLamtv>(entity =>
        {
            entity.HasKey(e => e.OrderLamtvId).HasName("PK__OrderLam__20707CE4BDBE984D");

            entity.ToTable("OrderLamtv");

            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.OrderStatus).HasMaxLength(50);
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.OrderType).WithMany(p => p.OrderLamtvs)
                .HasForeignKey(d => d.OrderTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OrderLamt__Order__5812160E");

            entity.HasOne(d => d.ServiceCenter).WithMany(p => p.OrderLamtvs)
                .HasForeignKey(d => d.ServiceCenterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OrderLamt__Servi__571DF1D5");

            entity.HasOne(d => d.User).WithMany(p => p.OrderLamtvs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OrderLamt__UserI__5629CD9C");
        });

        modelBuilder.Entity<OrderTypeLamtv>(entity =>
        {
            entity.HasKey(e => e.OrderTypeLamtvId).HasName("PK__OrderTyp__333ED3C38AAC53CF");

            entity.ToTable("OrderTypeLamtv");

            entity.Property(e => e.OrderTypeName).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<PartThanNth>(entity =>
        {
            entity.HasKey(e => e.PartThanNthid).HasName("PK__PartThan__B2A67F5AA61D1DC6");

            entity.ToTable("PartThanNTH");

            entity.Property(e => e.PartThanNthid).HasColumnName("PartThanNTHId");
            entity.Property(e => e.CompanyName).HasMaxLength(255);
            entity.Property(e => e.PartName).HasMaxLength(255);
        });

        modelBuilder.Entity<ServiceCenterHieupt>(entity =>
        {
            entity.HasKey(e => e.ServiceCenterHieuptId).HasName("PK__ServiceC__2ABBA20433F8D302");

            entity.ToTable("ServiceCenterHieupt");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.PhoneNumber).HasMaxLength(50);
            entity.Property(e => e.ServiceCenterName).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<ServiceFeedback>(entity =>
        {
            entity.HasKey(e => e.ServiceFeedbackId).HasName("PK__ServiceF__A279FCF99CAE066D");

            entity.ToTable("ServiceFeedback");

            entity.Property(e => e.FeedbackDate).HasColumnType("datetime");

            entity.HasOne(d => d.Service).WithMany(p => p.ServiceFeedbacks)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK__ServiceFe__Servi__08B54D69");

            entity.HasOne(d => d.User).WithMany(p => p.ServiceFeedbacks)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__ServiceFe__UserI__09A971A2");
        });

        modelBuilder.Entity<ServiceThongnm>(entity =>
        {
            entity.HasKey(e => e.ServiceThongnmId).HasName("PK__ServiceT__AD3353EC68B9B5CE");

            entity.ToTable("ServiceThongnm");

            entity.Property(e => e.Category).HasMaxLength(100);
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DurationTime).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ServiceName).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(100);
            entity.Property(e => e.TimeMaintenance).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.ServiceCenter).WithMany(p => p.ServiceThongnms)
                .HasForeignKey(d => d.ServiceCenterId)
                .HasConstraintName("FK__ServiceTh__Servi__693CA210");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ServiceThongnms)
                .HasForeignKey(d => d.ServiceTypeId)
                .HasConstraintName("FK__ServiceTh__Servi__6A30C649");

            entity.HasMany(d => d.ServiceCenters).WithMany(p => p.Services)
                .UsingEntity<Dictionary<string, object>>(
                    "ServiceOnCenter",
                    r => r.HasOne<ServiceCenterHieupt>().WithMany()
                        .HasForeignKey("ServiceCenterId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__ServiceOn__Servi__7E37BEF6"),
                    l => l.HasOne<ServiceThongnm>().WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__ServiceOn__Servi__7D439ABD"),
                    j =>
                    {
                        j.HasKey("ServiceId", "ServiceCenterId").HasName("PK__ServiceO__E200D2B4ABDD401A");
                        j.ToTable("ServiceOnCenter");
                    });
        });

        modelBuilder.Entity<ServiceTypeThongnm>(entity =>
        {
            entity.HasKey(e => e.ServiceTypeThongnmId).HasName("PK__ServiceT__99089536059EEC17");

            entity.ToTable("ServiceTypeThongnm");

            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ShiftsNamPk>(entity =>
        {
            entity.HasKey(e => e.ShiftNamPkId).HasName("PK__ShiftsNa__297919531A1FDACD");

            entity.ToTable("ShiftsNamPK");

            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.TimeEnd).HasColumnType("datetime");
            entity.Property(e => e.TimeStart).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.WorkingNote).HasMaxLength(255);

            entity.HasOne(d => d.Manager).WithMany(p => p.ShiftsNamPks)
                .HasForeignKey(d => d.ManagerId)
                .HasConstraintName("FK__ShiftsNam__Manag__4222D4EF");

            entity.HasOne(d => d.ServiceCenter).WithMany(p => p.ShiftsNamPks)
                .HasForeignKey(d => d.ServiceCenterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ShiftsNam__Servi__412EB0B6");
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId).HasName("PK_SystemUserAccount");

            entity.ToTable("System.UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UsePart>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CenterPart).WithMany()
                .HasForeignKey(d => d.CenterPartId)
                .HasConstraintName("FK__UseParts__Center__7A672E12");

            entity.HasOne(d => d.Maintaining).WithMany()
                .HasForeignKey(d => d.MaintainingId)
                .HasConstraintName("FK__UseParts__Mainta__797309D9");
        });

        modelBuilder.Entity<UserShiftsNamPk>(entity =>
        {
            entity.HasKey(e => e.UserShiftsNamPkId).HasName("PK__UserShif__2C3C0879C3DD34A5");

            entity.ToTable("UserShiftsNamPk");

            entity.Property(e => e.WorkingStatus).HasMaxLength(100);

            entity.HasOne(d => d.Shift).WithMany(p => p.UserShiftsNamPks)
                .HasForeignKey(d => d.ShiftId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UserShift__Shift__44FF419A");

            entity.HasOne(d => d.User).WithMany(p => p.UserShiftsNamPks)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UserShift__UserI__45F365D3");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}